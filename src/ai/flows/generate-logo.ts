// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Generates a logo based on a text description using generative AI.
 *
 * - generateLogo - A function that generates a logo based on the provided text description.
 * - GenerateLogoInput - The input type for the generateLogo function.
 * - GenerateLogoOutput - The return type for the generateLogo function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateLogoInputSchema = z.object({
  description: z.string().describe('The text description or name for the logo.'),
  style: z.string().describe('The desired style of the logo (e.g., neon, cyberpunk, origami).'),
});
export type GenerateLogoInput = z.infer<typeof GenerateLogoInputSchema>;

const GenerateLogoOutputSchema = z.object({
  logoDataUri: z.string().describe("The generated logo as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
});
export type GenerateLogoOutput = z.infer<typeof GenerateLogoOutputSchema>;

export async function generateLogo(input: GenerateLogoInput): Promise<GenerateLogoOutput> {
  return generateLogoFlow(input);
}

const generateLogoPrompt = ai.definePrompt({
  name: 'generateLogoPrompt',
  input: {schema: GenerateLogoInputSchema},
  output: {schema: GenerateLogoOutputSchema},
  prompt: `Generate a logo based on the following description and style.

Description: {{{description}}}
Style: {{{style}}}

The logo should be returned as a data URI.
`,
});

const generateLogoFlow = ai.defineFlow(
  {
    name: 'generateLogoFlow',
    inputSchema: GenerateLogoInputSchema,
    outputSchema: GenerateLogoOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
        model: 'googleai/gemini-2.0-flash-exp',
        prompt: [
          {text: `Generate a logo with the following style: ${input.style}`},
          {text: `Logo description: ${input.description}`}
        ],
        config: {
          responseModalities: ['TEXT', 'IMAGE'],
        },
      });

    return {
      logoDataUri: media.url,
    };
  }
);
