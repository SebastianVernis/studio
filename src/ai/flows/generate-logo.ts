
// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Generates and refines logos based on text descriptions using generative AI.
 *
 * - generateLogo - A function that generates a logo based on the provided text description and style.
 * - GenerateLogoInput - The input type for the generateLogo function.
 * - GenerateLogoOutput - The return type for the generateLogo function.
 * - refineLogo - A function that refines an existing logo based on additional instructions.
 * - RefineLogoInput - The input type for the refineLogo function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateLogoInputSchema = z.object({
  description: z.string().describe('The text description or name for the logo.'),
  style: z.string().describe('The desired style of the logo (e.g., neon, cyberpunk, origami).'),
});
export type GenerateLogoInput = z.infer<typeof GenerateLogoInputSchema>;

const GenerateLogoOutputSchema = z.object({
  logoDataUri: z.string().describe("The generated logo as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
});
export type GenerateLogoOutput = z.infer<typeof GenerateLogoOutputSchema>;

export async function generateLogo(input: GenerateLogoInput): Promise<GenerateLogoOutput> {
  return generateLogoFlow(input);
}

const generateLogoPrompt = ai.definePrompt({
  name: 'generateLogoPrompt',
  input: {schema: GenerateLogoInputSchema},
  output: {schema: GenerateLogoOutputSchema},
  prompt: `You are an expert logo designer. Generate a logo based on the detailed description and style provided.
Analyze the description for key elements, concepts, and objects to represent.
Analyze the style to determine the visual language, color palette, typography (if applicable), and overall mood.
The logo should be visually appealing, memorable, and relevant to the description.

Description: {{{description}}}
Style: {{{style}}}

Return the logo as a data URI. Ensure the image is well-composed and clear.
`,
});

const generateLogoFlow = ai.defineFlow(
  {
    name: 'generateLogoFlow',
    inputSchema: GenerateLogoInputSchema,
    outputSchema: GenerateLogoOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
        model: 'googleai/gemini-2.0-flash-exp',
        prompt: [
          {text: `Generate a logo with the following style: ${input.style}. The description for the logo is: ${input.description}. Please analyze these inputs carefully to create a fitting logo.`},
        ],
        config: {
          responseModalities: ['TEXT', 'IMAGE'],
        },
      });

    return {
      logoDataUri: media.url,
    };
  }
);

// Schema and flow for refining a logo
const RefineLogoInputSchema = z.object({
  existingLogoDataUri: z.string().describe("The existing logo as a data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
  originalDescription: z.string().describe('The original text description or name for the logo.'),
  originalStyle: z.string().describe('The original desired style of the logo.'),
  refinementPrompt: z.string().describe('Additional instructions to refine the logo.'),
});
export type RefineLogoInput = z.infer<typeof RefineLogoInputSchema>;

export async function refineLogo(input: RefineLogoInput): Promise<GenerateLogoOutput> {
  return refineLogoFlow(input);
}

const refineLogoPromptDefinition = ai.definePrompt({
  name: 'refineLogoPrompt',
  input: {schema: RefineLogoInputSchema},
  output: {schema: GenerateLogoOutputSchema},
  prompt: `You are an expert logo designer. You are tasked with refining an existing logo based on further instructions.
Original Logo Context:
- Description: {{{originalDescription}}}
- Style: {{{originalStyle}}}

Existing Logo:
{{media url=existingLogoDataUri}}

Refinement Instructions:
{{{refinementPrompt}}}

Based on the refinement instructions, modify the existing logo. The new logo should incorporate the requested changes while maintaining the spirit of the original design, unless the instructions explicitly state otherwise.
Return the refined logo as a data URI. Ensure the image is well-composed and clear.
`,
});


const refineLogoFlow = ai.defineFlow(
  {
    name: 'refineLogoFlow',
    inputSchema: RefineLogoInputSchema,
    outputSchema: GenerateLogoOutputSchema,
  },
  async (input: RefineLogoInput) => {
    const {media} = await ai.generate({
      model: 'googleai/gemini-2.0-flash-exp',
      prompt: [
        {media: {url: input.existingLogoDataUri}},
        {text: `This is the original logo. The original description was: "${input.originalDescription}" and style was "${input.originalStyle}". Now, refine this logo with the following instructions: "${input.refinementPrompt}".`},
      ],
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });
    return {
      logoDataUri: media.url,
    };
  }
);
